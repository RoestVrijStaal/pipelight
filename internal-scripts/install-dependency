#!/usr/bin/env bash

usage()
{
	echo ""
	echo "Usage: ./install-dependency PACKAGES"
	echo ""
	echo "Environment variables:"
	echo "  WINE                  path to the wine executable"
	echo "  WINESERVER            path to the wineserver"
	echo "  WINEPREFIX            usually \$HOME/.wine-pipelight"
	echo "  WINEARCH              usually win32"
	echo "  QUIETINSTALLATION=1   don't show the original installation dialogs"
	echo ""
	echo "Packages:"
	echo "	wine-silverlight4-installer"
	echo "	wine-silverlight5.0-installer"
	echo "	wine-silverlight5.1-installer"
	echo "	wine-mpg2splt-installer"
	echo "	wine-wininet-installer"
	echo "	wine-browser-installer"
	echo "	wine-flash-installer"
	echo "	wine-shockwave-installer"
	echo "	wine-unity3d-installer"
	echo ""
}

PRG=$(basename "$0")

# > Marks a file in order to delete it at program termination
# arguments:
# $1	- File to delete
ATEXIT_RM_LIST=()
atexit_add_rm()
{
	ATEXIT_RM_LIST+=("$1")
}

atexit()
{
	local file
	for file in "${ATEXIT_RM_LIST[@]}"; do
		echo "Deleting temporary '$file'."
		rm "$file"
	done
}

# > Checks if a dependency is already installed
# arguments:
# $1	- SHA256
# $DEP
is_installed()
{
	local SHA="$1"
	local ckfile="$WINEPREFIX/$DEP.installed"
	[ -f "$ckfile" ] && [ "$SHA" == ""$(cat "$ckfile") ]
	return $?
}

# > Marks a dependency as already installed
# arguments: same as is_installed
mark_installed()
{
	local SHA="$1"
	local ckfile="$WINEPREFIX/$DEP.installed"
	echo "$SHA" > "$ckfile"
}

# > Download a given dependency file
# arguments:
# $1	- URL
# $2	- SHA256
# $3	- Overwrite file extension
# returns:
# $DOWNLOADFILE
DOWNLOADFILE=""
download()
{
	local URL="$1";	local SHA="$2";	local EXT="$3"

	if [ -z "$EXT" ]; then
		EXT=$(echo "$URL" | sed 's/.*\.//')
	fi

	# Reuse files from the netflix-desktop package if available
	local dlfile="/var/lib/wine-browser-installer/$DEP.$EXT"
	if [ -f "$dlfile" ] && [ "$SHA" == ""$(sha256sum "$dlfile" | cut -d' ' -f1) ]; then
		DOWNLOADFILE="$dlfile"
		return 0
	fi

	# Reuse existing download
	local dlfile="/tmp/pipelight-$DEP.$EXT"
	if [ -f "$dlfile" ] && [ "$SHA" == ""$(sha256sum "$dlfile" | cut -d' ' -f1) ]; then
		DOWNLOADFILE="$dlfile"
		return 0
	fi

	local trycount=3
	local tmpfile=$(mktemp --suffix=".$EXT")
	[ -f "$tmpfile" ] || return 1

	# Download to tmpfile
	while true; do
		if [ "$trycount" -le 0 ]; then
			rm "$tmpfile"
			echo "[$PRG] ERROR: Downloading failed multiple times - please check your internet connection." >&2
			return 1
		fi

		wget -O "$tmpfile" "$URL" 2>&1 | progressbar "Please wait, downloading ..." "Downloading $DEP";
		if [ $? -eq 0 ] && [ -f "$tmpfile" ] && [ "$SHA" == ""$(sha256sum "$tmpfile" | cut -d' ' -f1) ]; then
			break
		fi

		(( trycount-- ))
		sleep 2
	done

	# Move the downloaded file to the right path
	if mv "$tmpfile" "$dlfile"; then
		chmod 0644 "$dlfile"
		DOWNLOADFILE="$dlfile"
		return 0
	fi

	# Continue using the temp path
	atexit_add_rm "$tmpfile"
	DOWNLOADFILE="$tmpfile"
	return 0
}

# > Waits until the wineserver terminates with a specific timeout
# arguments:
# $1	- timeout
wait_wineserver()
{
	local TIMEOUT="$1"
	while "$WINESERVER" --kill=0 && [ "$TIMEOUT" -gt 0 ]; do
		sleep 1
		(( TIMEOUT-- ))
	done
}

# > Sets a registry key
# arguments:
# $1	- key
# $2	- path
register_mozilla_plugin()
{
	local KEY="$1"; local VAL="$2"

	local tmpfile=$(mktemp)
	[ -f "$tmpfile" ] || return 1

	local valfile=$("$WINE" winepath --windows "$VAL" | sed 's/\\/\\\\/g')

	(
		echo "REGEDIT4"
		echo ""
		echo "[HKEY_LOCAL_MACHINE\\Software\\MozillaPlugins\\$KEY]"
		echo "\"Path\"=\"$valfile\""
	) > "$tmpfile"

	"$WINE" regedit "$tmpfile"
	local res=$?

	# Cleanup
	rm "$tmpfile"

	# Successful
	return $?
}

# > Installer for Silverlight
# arguments:
# $1	- version
# $DOWNLOADFILE
install_silverlight()
{
	local VER="$1"

	# Remove the registry keys for Silverlight since other versions can prevent this one from installing
	"$WINE" msiexec /uninstall {89F4137D-6C26-4A84-BDB8-2E5A4BB71E00};

	# Launch the installer
	if [ "$QUIETINSTALLATION" -eq 0 ]; then
		"$WINE" "$DOWNLOADFILE" /noupdate 2>&1
	else
		"$WINE" "$DOWNLOADFILE" /q /doNotRequireDRMPrompt /noupdate 2>&1 | progressbar "Please wait, installing ..." "Running $DEP"
	fi

	local programfiles="$WINEPREFIX/drive_c/Program Files"
	if [ ! -d "$programfiles/Microsoft Silverlight/$VER" ]; then
		echo "[$PRG] ERROR: Installer for $DEP did not run correctly or was aborted." >&2
		return 1
	fi

	# Move the installation to a version-specific folder that nothing will touch
	mkdir -p "$programfiles/Silverlight"
	mv "$programfiles/Microsoft Silverlight/$VER" "$programfiles/Silverlight/$VER"

	# Wait for Wine to finish building the .desktop files
	wait_wineserver 10

	# Remove the Silverlight menu shortcut
	local user_link_file="$WINEPREFIX/drive_c/users/$USER/Start Menu/Programs/Microsoft Silverlight/Microsoft Silverlight.lnk"
	local user_desktop_file="$HOME/.local/share/applications/wine/Programs/Microsoft Silverlight/Microsoft Silverlight.desktop"
	rm -f "$user_link_file"
	rm -f "$user_desktop_file"
	xdg-desktop-menu uninstall "$user_desktop_file" 2>/dev/null

	# Successful
	return 0
}

# > Configure Silverlight
# arguments:
# $1	- version
# $DEP
configure_silverlight()
{
	local VER="$1"
	local cfgfile="$WINEPREFIX/silverlight.configured"

	# Already configured before to the same version
	if [ -f "$cfgfile" ] && [ "$VER" == ""$(cat "$cfgfile") ]; then return 0; fi
	echo "[$PRG] Configure $DEP."

	local programfiles="$WINEPREFIX/drive_c/Program Files"

	# Try to register this plugin
	if ! register_mozilla_plugin "@Microsoft.com/NpCtrl,version=1.0" "$programfiles/Silverlight/$VER/npctrl.dll"; then
		echo "[$PRG] ERROR: Failed to configure $DEP." >&2
		return 1
	fi

	echo "$VER" > "$cfgfile"
	return 0
}

# > Extract cab library
# arguments:
# $1	- file to extract
# $DOWNLOADFILE
#
# optional arguments:
# --reg - run regsvr32.dll to register the dll
install_cabextract()
{
	local FILE="$1"; shift

	local system32="$WINEPREFIX/drive_c/windows/system32"
	cabextract -d "$system32" "$DOWNLOADFILE" -F "$FILE"
	if [ ! -f "$system32/$FILE" ]; then
		echo "[$PRG] ERROR: Failed to extract $FILE from cab file." >&2
		return 1
	fi

	# Process additional args
	while [ $# -gt 0 ] ; do
		local cmd=$1; shift
		case "$cmd" in
			--reg)
				"$WINE" regsvr32.exe "$FILE"
				;;
			*)
				echo "[$PRG] ERROR: Internal error, install_cabextract called with argument: $cmd" >&2
				return 1
				;;
		esac
	done

	# Successful
	return 0
}

# > Install wininet.dll
# arguments:
# $DOWNLOADFILE
install_wininet()
{
	if ! install_cabextract wininet.dll; then return 1; fi

	# Setup wine dlloverride and adjust some wininet.dll related settings
	local tmpfile=$(mktemp)
	[ -f "$tmpfile" ] || return 1

	(
		echo "REGEDIT4"
		echo ""
		echo "[HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides]"
		echo "\"*wininet\"=\"native,builtin\""
		echo ""
		echo "[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]"
		echo "\"MaxConnectionsPerServer\"=dword:7fffffff"
		echo "\"MaxConnectionsPer1_0Server\"=dword:7fffffff"
	) > "$tmpfile"

	"$WINE" regedit "$tmpfile"
	local res=$?

	# Cleanup
	rm "$tmpfile"

	# Successful
	return $?

}

# > Install firefox
# arguments:
# $DOWNLOADFILE
install_firefox()
{
	local tmpfile=$(mktemp)
	[ -f "$tmpfile" ] || return 1

	(
		echo "[Install]"
		echo "QuickLaunchShortcut=false"
		echo "DesktopShortcut=false"
		echo "StartMenuShortcuts=false"
		echo "MaintenanceService=false"
	) > "$tmpfile"

	local inifile=$("$WINE" winepath --windows "$tmpfile")
	"$WINE" "$DOWNLOADFILE" "/INI=$inifile" 2>&1 | progressbar "Please wait, installing ..." "Running $DEP"

	# Cleanup
	rm "$tmpfile"

	# Successful
	return 0
}

# > Install flash
# arguments:
# $1	- version path component
# $DOWNLOADFILE
install_flash()
{
	VER="$1"

	# Launch the installer
	if [ "$QUIETINSTALLATION" -eq 0 ]; then
		"$WINE" "$DOWNLOADFILE" 2>&1
	else
		"$WINE" "$DOWNLOADFILE" -install 2>&1 | progressbar "Please wait, installing ..." "Running $DEP"
	fi

	local installdir="$WINEPREFIX/drive_c/windows/system32/Macromed/Flash"
	if [ ! -f "$installdir/NPSWF32_$VER.dll" ]; then
		echo "[$PRG] ERROR: Installer for $DEP did not run correctly or was aborted." >&2
		return 1
	fi

	local flashconfig="$installdir/mms.cfg"
	if ! grep -q "^OverrideGPUValidation=" "$flashconfig" 2>/dev/null; then
		(
			grep -v "^OverrideGPUValidation=" "$flashconfig" 2>/dev/null
			echo "OverrideGPUValidation=true"
		) > "$flashconfig.bak"

		if ! mv "$flashconfig.bak" "$flashconfig"; then
			echo "[$PRG] ERROR: Unable to change $DEP plugin settings." >&2
		fi
	fi

	# Successful
	return 0
}

# > Install shockwave
# arguments:
# $1	- version path component
# $DOWNLOADFILE
install_shockwave()
{
	VER="$1"

	# Launch the installer
	if [ "$QUIETINSTALLATION" -eq 0 ]; then
		"$WINE" "$DOWNLOADFILE" 2>&1
	else
		"$WINE" "$DOWNLOADFILE" /S 2>&1 | progressbar "Please wait, installing ..." "Running $DEP"
	fi

	local installdir="$WINEPREFIX/drive_c/windows/system32/Adobe/Director"
	if [ ! -f "$installdir/np32dsw_$VER.dll" ]; then
		echo "[$PRG] ERROR: Installer for $DEP did not run correctly or was aborted." >&2
		return 1
	fi

	# Switch to OpenGL mode
	# local tmpfile=$(mktemp)
	# [ -f "$tmpfile" ] || return 1
	#
	# (
	# 	echo "REGEDIT4"
	# 	echo ""
	# 	echo "[HKEY_CURRENT_USER\\Software\\Macromedia\\Shockwave 12\\renderer3dsetting]"
	# 	echo "@=\"2\""
	# 	echo ""
	# 	echo "[HKEY_CURRENT_USER\\Software\\Macromedia\\Shockwave 12\\renderer3dsettingPerm]"
	# 	echo "@=\"2\""
	# ) > "$tmpfile"
	# 
	# "$WINE" regedit "$tmpfile"

	# Successful
	return 0
}

# > Install Unity3D
# arguments: None
# $DOWNLOADFILE
install_unity3d()
{
	VER="$1"

	# Launch the installer
	if [ "$QUIETINSTALLATION" -eq 0 ]; then
		"$WINE" "$DOWNLOADFILE" /AllUsers 2>&1
	else
		"$WINE" "$DOWNLOADFILE" /S /AllUsers 2>&1 | progressbar "Please wait, installing ..." "Running $DEP"
	fi

	local installdir="$WINEPREFIX/drive_c/Program Files/Unity/WebPlayer/loader"
	if [ ! -f "$installdir/npUnity3D32.dll" ]; then
		echo "[$PRG] ERROR: Installer for $DEP did not run correctly or was aborted." >&2
		return 1
	fi

	# Successful
	return 0
}

# Check if some visual feedback is possible
if command -v zenity >/dev/null 2>&1; then
	progressbar()
	{
		WINDOWID="" zenity --progress --title="$1" --text="$2" --pulsate --width=400 --auto-close --no-cancel
	}

elif command -v kdialog >/dev/null 2>&1 && command -v qdbus >/dev/null 2>&1; then
	#Check if qdbus is symlinked to qtchooser (for Arch Linux)
	QDBUSPATH=$(which qdbus)
	QDBUSPATH=$(readlink "$QDBUSPATH")
	if [ "$QDBUSPATH" == "qtchooser" ]; then
		QDBUSPATH="qtchooser -run-tool=qdbus -qt=4"
	else
		QDBUSPATH="qdbus"
	fi

	progressbar()
	{
		local dcopref=$(kdialog --title "$1" --progressbar "$2" 10)

		# Update the progress bar (not really the progress, but the user knows that something is going on)
		(
			local progress=1
			while true; do
				local err=$($QDBUSPATH $dcopref org.freedesktop.DBus.Properties.Set org.kde.kdialog.ProgressDialog value "$PROGRESS" 2>&1)
				if [ ! -z "$err" ]; then break; fi

				sleep 1

				(( progress++ ))
				if [ "$progress" -gt 10 ]; then progress=0; fi
			done
		) &
		local dialogpid="$!"

		cat - > /dev/null
		
		kill "$dialogpid"
		$QDBUSPATH $dcopref org.kde.kdialog.ProgressDialog.close  &> /dev/null
	}

else
	progressbar()
	{
		cat -
	}
fi

# Print usage message when no arguments are given at all
if [ $# -eq 0 ]; then
	usage
	exit 0
fi

# Check for environment variables
if [ -z "$WINE" ] || [ -z "$WINEPREFIX" ]; then
	echo "[$PRG] ERROR: Missing necessary environment variables WINE and WINEPREFIX." >&2
	exit 1
fi

if [ -z "$WINESERVER" ]; then
	if [ ! -f "${WINE}server" ]; then
		echo "[$PRG] ERROR: Missing necessary environment variable WINESERVER." >&2
		exit 1
	fi
	export WINESERVER="${WINE}server"
fi

# Silent installation
if [ -z "$QUIETINSTALLATION" ]; then
	QUIETINSTALLATION=0
fi

# Generate a lock file based on the wine prefix
LOCKFILE=$(echo "$WINEPREFIX" | md5sum | cut -d' ' -f1)
LOCKFILE="/tmp/wine-$LOCKFILE.tmp"

LOCKFD=9; eval "exec $LOCKFD> \"\$LOCKFILE\""
if ! flock -x -w 360 "$LOCKFD"; then
	echo "[$PRG] ERROR: Failed to obtain an installation lock in 6 minutes." >&2
	exit 1;
fi

# Close file descriptor (ensure that the lock is released when the installation is ready)
trap "EXITSTATUS=\$?; flock -u \"$LOCKFD\"; atexit; exit \"\$EXITSTATUS\"" 0

# Initialize wine if not done yet
if [ ! -d "$WINEPREFIX" ]; then
	DISPLAY="" "$WINE" wineboot.exe 2>&1 | progressbar "Please wait..." "Creating wine prefix"
fi

# Set default return value
RET=0

while [ $# -gt 0 ] ; do
	DEP="$1"; INS=(); CFG=(); URL=""; SHA=""; EXT=""; DOWNLOADFILE=""; shift
	case "$DEP" in
		wine-prefix)
			continue # The wine-prefix is created automatically for all packages
			;;
		wine-silverlight4-installer)
			INS=(install_silverlight    "4.1.10329.0")
			#CFG=(configure_silverlight "4.1.10329.0")
			URL="http://silverlight.dlservice.microsoft.com/download/6/A/1/6A13C54D-3F35-4082-977A-27F30ECE0F34/10329.00/runtime/Silverlight.exe"
			SHA="b0e476090206b2e61ba897de9151a31e0182c0e62e8abd528c35d3857ad6131c"
			;;
		wine-silverlight5.0-installer)
			INS=(install_silverlight    "5.0.61118.0")
			#CFG=(configure_silverlight "5.0.61118.0")
			URL="http://silverlight.dlservice.microsoft.com/download/5/5/7/55748E53-D673-4225-8072-4C7A377BB513/runtime/Silverlight.exe"
			SHA="dd45a55419026c592f8b6fc848dceface7e1ce98720bf13848a2e8ae366b29e8"
			;;
		wine-silverlight5.1-installer)
			INS=(install_silverlight   "5.1.20513.0")
			CFG=(configure_silverlight "5.1.20513.0")
			URL="http://silverlight.dlservice.microsoft.com/download/B/3/C/B3CF6815-40B1-4E36-8746-C4A0381AD260/20513.00/runtime/Silverlight.exe"
			SHA="8c5d1ddaefd629670033841fb88188789f2f63170b2fe1aaddb2c9b33d4532ea"
			;;
		wine-mpg2splt-installer)
			INS=(install_cabextract mpg2splt.ax --reg)
			URL="http://download.microsoft.com/download/8/0/D/80D7E79D-C0E4-415A-BCCA-E229EAFE2679/dshow_nt.cab"
			SHA="984ed15e23a00a33113f0012277e1e680c95782ce2c44f414e7af14e28e3f1a2"
			;;
		wine-wininet-installer)
			INS=(install_wininet)
			URL="http://download.microsoft.com/download/6/a/a/6aa52757-8531-41dc-9a87-e050d6b99106/IE5.01sp4-KB890923-Windows2000sp4-x86-ENU.exe"
			SHA="a1dd58d0ae1fddfdb1ea93b3d3cf2d768de64e6e622f03abe99ca60aee9e83e3"
			;;
		wine-browser-installer)
			INS=(install_firefox)
			URL="http://download.mozilla.org/?product=firefox-22.0&os=win&lang=en-US"
			SHA="abb189f17e65e73d61843247ad1af7c997318b7854fa850a04e5f9d9a20cdd03"
			EXT="exe"
			;;
		wine-flash-installer)
			INS=(install_flash "11_9_900_117")
			URL="http://fpdownload.macromedia.com/get/flashplayer/pdc/11.9.900.117/install_flash_player.exe"
			SHA="3e8d832591aff54510f9904b6348e2e2351a28a4ef137f4f19535b747c00c89e"
			;;
		wine-shockwave-installer)
			INS=(install_shockwave "1204144")
			URL="http://fpdownload.macromedia.com/get/shockwave/default/english/win95nt/latest/sw_lic_full_installer.exe"
			SHA="d75fc76df87fb9991cf021dd08d2a558ffa6c47b1ac133e3f33efe65fc6dfa39"
			;;
		wine-unity3d-installer)
			INS=(install_unity3d)
			URL="http://webplayer.unity3d.com/download_webplayer-3.x/UnityWebPlayer.exe"
			SHA="cd1d1a492b1b6c4891902f76477809b696cd812c1edb85085135d46fb1c10b38"
			;;
		*)
			echo "[$PRG] ERROR: No installer script found for $DEP." >&2
			RET=1
			continue
			;;
	esac

	# Is already installed?
	if ! is_installed "$SHA"; then
		echo "[$PRG] Downloading and running $DEP."

		# Fetch the download
		if ! download "$URL" "$SHA" "$EXT"; then
			echo "[$PRG] ERROR: Download of $DEP failed." >&2
			RET=1
			continue
		fi

		# Do the installation
		if ! eval "${INS[@]}"; then
			echo "[$PRG] ERROR: Execution of $DEP failed." >&2
			RET=1
			continue
		fi

		# Mark the package as installed
		mark_installed "$SHA"

	else
		echo "[$PRG] $DEP is already installed in '$WINEPREFIX'."
	fi

	# Do the configure step
	if [ "${#CFG[*]}" -gt 0 ] && ! eval "${CFG[@]}"; then
		echo "[$PRG] ERROR: Configuration of $DEP failed." >&2
		RET=1
		continue
	fi

done

exit "$RET"