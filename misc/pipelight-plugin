#!/usr/bin/env bash

# Global configuration
SYSTEMDIR="@@PLUGIN_SYSTEM_PATH@@"
PLUGINDIR="@@MOZ_PLGIN_PATH@@"
LIBPIPELIGHT="libpipelight"

# Supported plugins
PLUGINS=("silverlight" "flash")

# Fallback to Ubuntu path if not installed via make install
if [[ "$SYSTEMDIR" =~ ^@@.*@@$ ]] && [ -f "/usr/lib/pipelight/$LIBPIPELIGHT.so" ]; then
	SYSTEMDIR="/usr/lib/pipelight"
elif [ ! -d "$SYSTEMDIR" ]; then
	echo "ERROR: Failed to find $SYSTEMDIR." >&2
	exit 1
else
	SYSTEMDIR=$(readlink -m "$SYSTEMDIR")	
fi

if [[ "$PLUGINDIR" =~ ^@@.*@@$ ]]; then
	PLUGINDIR="/usr/lib/mozilla/plugins"
else
	PLUGINDIR=$(readlink -m "$PLUGINDIR")
fi

usage()
{
	echo ""
	echo "Usage: pipelight-plugin OPTIONS"
	echo ""
	echo "Environment variables:"
	echo "  MOZ_PLUGIN_PATH             overwrite plugin path"
	echo ""
	echo "Options:"
	echo "  --enable  PLUGIN            enable plugin"
	echo "  --disable PLUGIN            disable plugin"
	echo "  --disable-all               disable all plugins"
	echo ""
	echo "Global options (requires root rights):"
	echo "  --create-mozilla-plugins    create copies of libpipelight.so"
	echo "  --remove-mozilla-plugins    remove copies of libpipelight.so"
	echo ""
	echo "Supported plugins:"
	for entry in "${PLUGINS[@]}"; do
		echo "  $entry"
	done
	echo ""
}

# > Get install directory
# returns:
# $INSTALLDIR
INSTALLDIR=""
get_installdir()
{

	# Global installation
	if [ $(/usr/bin/id -u) -eq 0 ]; then
		INSTALLDIR="$PLUGINDIR"

	# Use environment variable
	elif [ ! -z "$MOZ_PLUGIN_PATH" ] && [ -d "$MOZ_PLUGIN_PATH" ]; then
		INSTALLDIR=$(readlink -m "$MOZ_PLUGIN_PATH")

	# Local installation
	else
		INSTALLDIR="$HOME/.mozilla/plugins"
	fi
}

# > Checks if a given plugin is supported
# arguments:
# $1	- name of the plugin
is_supported_plugin()
{
	local PLUGIN="$1"
	for entry in "${PLUGINS[@]}"; do
		if [ "$PLUGIN" == "$entry" ]; then return 0; fi
	done
	return 1
}

# > Enables/Disables a given plugin
# arguments:
# $1	- name of the plugin
enable_plugin()
{
	local PLUGIN="$1"
	[ ! -z "$INSTALLDIR" ] || return 1

	if ! is_supported_plugin "$PLUGIN"; then
		echo "ERROR: Plugin $PLUGIN is unknown" >&2
		return 1
	fi

	local src="$SYSTEMDIR/$LIBPIPELIGHT-$PLUGIN.so"
	local dst="$INSTALLDIR/$LIBPIPELIGHT-$PLUGIN.so"

	if [ ! -f "$src" ]; then
		echo "ERROR: Your system is missing a copy of $SYSTEMDIR/$LIBPIPELIGHT.so at $src" >&2
		return 1
	fi

	# Create directory if it does not exist yet
	if [ ! -d "$INSTALLDIR" ] && ! mkdir -p "$INSTALLDIR" 2>/dev/null; then
		echo "ERROR: Failed to create $INSTALLDIR" >&2
		return 1
	fi

	# check if there is already a file
	if [ -e "$dst" ]; then
		if [ ! -L "$dst" ]; then
			echo "ERROR: $dst exists but is not a symlink, aborting - delete or rename this file manually." >&2
			return 1
		fi

		rm "$dst"
	fi

	if ! ln -s "$src" "$dst"; then
		echo "ERROR: Failed to create symlink from $src to $dst." >&2
		return 1
	fi

	echo "Plugin $PLUGIN is now enabled"
	return 0
}

disable_plugin()
{
	local PLUGIN="$1"
	[ ! -z "$INSTALLDIR" ] || return 1

	if ! is_supported_plugin "$PLUGIN"; then
		echo "ERROR: Plugin $PLUGIN is unknown" >&2
		return 1
	fi

	if [ ! -d "$INSTALLDIR" ]; then
		echo "ERROR: Your plugin dir $INSTALLDIR does not exist - are you running this as a wrong user?" >&2
		return 1
	fi

	local dst="$INSTALLDIR/$LIBPIPELIGHT-$PLUGIN.so"

	# check if there is a file
	if [ -e "$dst" ]; then
		if [ ! -L "$dst" ]; then
			echo "ERROR: $dst exists but is not a symlink, aborting - delete or rename this file manually." >&2
			return 1
		fi

		if ! rm "$dst" 2>/dev/null; then
			echo "ERROR: Failed to delete symlink $dst." >&2
			return 1
		fi

		echo "Plugin $PLUGIN is now disabled"
	fi
	
	return 0
}

# > Disables all plugins
disable_all_plugin()
{
	for entry in "${PLUGINS[@]}"; do
		if ! disable_plugin "$entry"; then return 1; fi
	done

	return 0
}

# > Create/Remove mozilla plugin copies
create_mozilla_plugins()
{
	local src="$SYSTEMDIR/$LIBPIPELIGHT.so"

	if [ ! -f "$src" ]; then
		echo "ERROR: Can't find Pipelight installation at $src." >&2
		return 1
	fi

	# Create copy of the original plugin in libpipelight-*.so
	for entry in "${PLUGINS[@]}"; do
		local dst="$SYSTEMDIR/$LIBPIPELIGHT-$entry.so"

		if [ -e "$dst" ] && ! rm -f "$dst" 2>/dev/null; then
			echo "ERROR: $dst exists but unable to delete it, aborting" >&2
			echo "ERROR: are you running this program with root rights?" >&2
			return 1
		fi

		if ! cp "$src" "$dst" 2>/dev/null; then
			echo "ERROR: failed to create copy of $src at $dst" >&2
			echo "ERROR: are you running this program with root rights?" >&2
			return 1
		fi
	done

	return 0
}

remove_mozilla_plugins()
{
	for entry in "${PLUGINS[@]}"; do
		local dst="$SYSTEMDIR/$LIBPIPELIGHT-$entry.so"

		if [ -e "$dst" ] && ! rm -f "$dst" 2>/dev/null; then
			echo "ERROR: Failed to remove $dst." >&2
			return 1
		fi

	done

	return 0
}

# Print usage message when no arguments are given at all
if [ $# -eq 0 ]; then
	usage
	exit 0
fi

# Get the installation directory
get_installdir

RET=0

while [[ $# > 0 ]] ; do
	CMD="$1"; shift
	case "$CMD" in
		--enable)
			if ! enable_plugin "$1"; then RET=1; fi
			shift
			;;
		--disable)
			if ! disable_plugin "$1"; then RET=1; fi
			shift
			;;
		--disable-all)
			if ! disable_all_plugin; then RET=1; fi
			;;

		--create-mozilla-plugins)
			if ! create_mozilla_plugins; then RET=1; fi
			;;
		--remove-mozilla-plugins)
			if ! remove_mozilla_plugins; then RET=1; fi
			;;

		--help)
			usage
			;;
		*)
			echo "ERROR: Unknown argument $CMD." >&2
			RET=1
			;;
	esac
done

exit "$RET"