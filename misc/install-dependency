#!/bin/sh
# This is a modified version of the script by Erich E. Hoover which does all the downloading
# and installation during the runtime. Moreover it doesn't have any additional dependencies
# as it contains everything hardcoded.

# Original versions:
# http://bazaar.launchpad.net/~ehoover/netflix-desktop/trunk/view/head:/wine-browser-installer/install-dependency
# http://bazaar.launchpad.net/~ehoover/netflix-desktop/trunk/files/head:/debian/  (all *.install-script files)

PRG=$(basename "$0");

# Environment variable check
if [ -z "${WINE}" ] || [ -z "${WINEPREFIX}" ]; then
	echo "$PRG: Missing necessary environment variables WINE and WINEPREFIX." >&2;
	exit 1;

elif [ $# -eq "0" ]; then
	echo "$PRG: Missing list of packages to install. Available packages are:" >&2;
	echo "$PRG: wine-silverlight{4,5.0,5.1}-installer, wine-mpg2splt-installer, wine-browser-installer" >&2;
	exit 1;
fi

echo "$PRG: WINE=\"${WINE}\" WINEPREFIX=\"${WINEPREFIX}\" WINEARCH=\"${WINEARCH}\"";

# Check if some visual feedback is possible
if command -v zenity >/dev/null 2>&1; then
	progressbar ()
	{
		WINDOWID="" zenity --progress --title="$1" --text="$2" --pulsate --width=400 --auto-close --no-cancel;
	}

elif command -v kdialog >/dev/null 2>&1; then
	#Check if qdbus is symlinked to qtchooser (for Arch Linux)
	QD_BUS=$(which qdbus);
	QTC=$(readlink "${QD_BUS}");
	if [ "$QTC" = "qtchooser" ]; then
		QD_BUS="qtchooser -run-tool=qdbus -qt=4";
	else
		QD_BUS="qdbus";
	fi

	progressbar ()
	{
		DCOPREF=$(kdialog --title "$1" --progressbar "$2" 10);
		# Update the progress bar (not really the progress, but the user knows that something is going on)
		(
			PROGRESS=1;
			while true; do
				ERR=$($QD_BUS $DCOPREF org.freedesktop.DBus.Properties.Set org.kde.kdialog.ProgressDialog value "$PROGRESS" 2>&1);
				if [ ! -z "$ERR" ]; then
					break
				fi
				sleep 1;
				PROGRESS=$((${PROGRESS}+1));
				if [ "$PROGRESS" -gt 10 ]; then
					PROGRESS=0;
				fi
			done
		) &
		DIALOGPID="$!"

		cat - > /dev/null;
		
		kill "$DIALOGPID";
		$QD_BUS $DCOPREF org.kde.kdialog.ProgressDialog.close  &> /dev/null;
	}

else
	progressbar ()
	{
		cat -;
	}
fi

DEPENDENCIES="$@";

# Generate a lock file based on the wine prefix
LOCK_FILE=$(echo "${WINEPREFIX}" | md5sum | cut -d" " -f1);
LOCK_FILE="/tmp/wine-${LOCK_FILE}.tmp";

# Make sure that this installation is only occurring in one process at a time
LOCK_FD=9; # must be less than 10 for dash
eval "exec ${LOCK_FD}> \"\${LOCK_FILE}\"";
flock -x -w 360 "${LOCK_FD}";
if [ $? -ne 0 ]; then
	echo "$PRG: Failed to obtain an installation lock in 6 minutes." >&2;
	exit 1;
fi

# Close file descriptor (ensure that the lock is released when the installation is ready)
trap "EXITSTATUS=\$?; flock -u \"${LOCK_FD}\"; exit \"\${EXITSTATUS}\";" 0

# Initialize wine if not done yet
if [ ! -d "${WINEPREFIX}" ]; then
	DISPLAY="" "${WINE}" wineboot.exe 2>&1 | \
		progressbar "Please wait..." "Creating wine prefix";
fi

NUMDELETEFILES="0";

# Overall status of the installation
RET="0";

for DEP in $DEPENDENCIES; do
	FILEEXT=""

	if [ "${DEP}" = "wine-silverlight4-installer" ]; then
		INSTALLER="silverlight";
		URL="http://silverlight.dlservice.microsoft.com/download/6/A/1/6A13C54D-3F35-4082-977A-27F30ECE0F34/10329.00/runtime/Silverlight.exe";
		SHA256SUM="b0e476090206b2e61ba897de9151a31e0182c0e62e8abd528c35d3857ad6131c";
		SILVERLIGHTVERSION="4.1.10329.0";

	elif [ "${DEP}" = "wine-silverlight5.0-installer" ]; then
		INSTALLER="silverlight";
		URL="http://silverlight.dlservice.microsoft.com/download/5/5/7/55748E53-D673-4225-8072-4C7A377BB513/runtime/Silverlight.exe"
		SHA256SUM="dd45a55419026c592f8b6fc848dceface7e1ce98720bf13848a2e8ae366b29e8";
		SILVERLIGHTVERSION="5.0.61118.0";

	elif [ "${DEP}" = "wine-silverlight5.1-installer" ]; then
		INSTALLER="silverlight";
		URL="http://silverlight.dlservice.microsoft.com/download/B/3/C/B3CF6815-40B1-4E36-8746-C4A0381AD260/20513.00/runtime/Silverlight.exe"
		SHA256SUM="8c5d1ddaefd629670033841fb88188789f2f63170b2fe1aaddb2c9b33d4532ea";
		SILVERLIGHTVERSION="5.1.20513.0";

	elif [ "${DEP}" = "wine-mpg2splt-installer" ]; then
		INSTALLER="cablibrary";
		URL="http://download.microsoft.com/download/8/0/D/80D7E79D-C0E4-415A-BCCA-E229EAFE2679/dshow_nt.cab";
		SHA256SUM="984ed15e23a00a33113f0012277e1e680c95782ce2c44f414e7af14e28e3f1a2";
		EXTRACTFILE="mpg2splt.ax";

	elif [ "${DEP}" = "wine-browser-installer" ]; then
		INSTALLER="firefox";
		URL="http://download.mozilla.org/?product=firefox-22.0&os=win&lang=en-US";
		SHA256SUM="abb189f17e65e73d61843247ad1af7c997318b7854fa850a04e5f9d9a20cdd03";
		FILEEXT="exe"

	elif [ "${DEP}" = "wine-flash-installer" ]; then
		INSTALLER="flash";
		URL="http://fpdownload.macromedia.com/get/flashplayer/pdc/11.8.800.168/install_flash_player.exe";
		SHA256SUM="2213027430edb7c0b90860c54bd5d797db9e32bb2ce6470c7b162adb58c421c7";
		FLASHVERSION="11_8_800_168";

	else
		echo "$PRG: No installer script found for ${DEP}." >&2;
		RET="1";
		continue;
	fi

	if [ -z "${FILEEXT}" ]; then
		FILEEXT=$(echo "${URL}" | sed 's/.*\.//');
	fi

	FILEINSTALLED="${WINEPREFIX}/${DEP}.installed";
	FILEDOWNLOAD="/tmp/pipelight-${DEP}.${FILEEXT}";

	# Check if its already installed
	if [ -f "${FILEINSTALLED}" ]; then
		INSTALL_SHA256SUM=$(cat "${FILEINSTALLED}")
		if [ "${SHA256SUM}" = "${INSTALL_SHA256SUM}" ]; then
			echo "$PRG: ${DEP} is already installed in ${WINEPREFIX}.";
			continue;
		fi
	fi

	# Does the downloaded file still exist?
	DOWNLOADOKAY="1";
	if [ -f "${FILEDOWNLOAD}" ]; then
		DOWNLOAD_SHA256SUM=$(sha256sum "${FILEDOWNLOAD}" | cut -d' ' -f1);
		if [ "${SHA256SUM}" = "${DOWNLOAD_SHA256SUM}" ]; then
			DOWNLOADOKAY="0";
		fi
	fi

	# Download required
	if [ "${DOWNLOADOKAY}" -ne "0" ]; then

		TMPFILE=$(mktemp --suffix=".${FILEEXT}");
		if [ ! -f "$TMPFILE" ]; then
			echo "$PRG: Failed to create tempfile." >&2;
			RET="1";
			continue;
		fi

		TRYCOUNT="3";

		while [ "${DOWNLOADOKAY}" -ne "0" ]; do
			if [ "${TRYCOUNT}" -le "0" ]; then
				break;
			fi

			wget -O "${TMPFILE}" "${URL}" 2>&1 | \
				progressbar "Please wait, downloading ..." "Downloading $DEP";

			# Check if it was successful this time
			if [ $? -eq 0 ] && [ -f "${TMPFILE}" ]; then
				DOWNLOAD_SHA256SUM=$(sha256sum "${TMPFILE}" | cut -d' ' -f1);
				if [ "${SHA256SUM}" = "${DOWNLOAD_SHA256SUM}" ]; then
					DOWNLOADOKAY="0";
					break
				fi
			fi

			TRYCOUNT=$((${TRYCOUNT}-1));
			sleep 2;
		done

		if [ "${DOWNLOADOKAY}" -ne "0" ]; then
			rm "${TMPFILE}";

			echo "$PRG: Downloading ${DEP} failed multiple times - please check your internet connection and if you're using the latest version of Pipelight." >&2;
			RET="1";
			continue;
		fi

		# Move the downloaded file to right path
		mv "${TMPFILE}" "${FILEDOWNLOAD}";
		if [ $? -eq "0" ]; then
			chmod 0644 "${FILEDOWNLOAD}";
		else
			FILEDOWNLOAD="${TMPFILE}";

			# Delete on exit
			eval "DELETEFILE_${NUMDELETEFILES}=\$TMPFILE";
			NUMDELETEFILES=$((${NUMDELETEFILES}+1));
		fi

	fi

	# Do the actual installation
	if [ "${INSTALLER}" = "silverlight" ]; then

		# Remove the registry keys for Silverlight since other versions can prevent this one from installing
		"${WINE}" msiexec /uninstall {89F4137D-6C26-4A84-BDB8-2E5A4BB71E00};

		# Launch the installer
		if [ -z "${QUIETINSTALLATION}" ] || [ "${QUIETINSTALLATION}" -eq 0 ]; then
			"${WINE}" "${FILEDOWNLOAD}" /noupdate 2>&1;
		else
			"${WINE}" "${FILEDOWNLOAD}" /q /doNotRequireDRMPrompt /noupdate 2>&1 | \
				progressbar "Please wait, installing ..." "Installing $DEP";
		fi

		PROGRAM_FILES="${WINEPREFIX}/drive_c/Program Files";

		if [ ! -d "${PROGRAM_FILES}/Microsoft Silverlight/${SILVERLIGHTVERSION}" ]; then
			echo "Installer for ${DEP} did not run correctly or was aborted.";
			RET="1";
			continue;
		fi

		# Move the installation to a version-specific folder that nothing will touch
		mkdir -p "${PROGRAM_FILES}/Silverlight";
		mv "${PROGRAM_FILES}/Microsoft Silverlight/${SILVERLIGHTVERSION}" "${PROGRAM_FILES}/Silverlight/${SILVERLIGHTVERSION}";

		# Wait for Wine to finish building the .desktop files
		SERVERPID=$(ps aux | grep "w[i]neserver" | grep -v 'nano' | sed 's|[^ ]*[ ]*\([^ ]*\).*|\1|g');
		TIMEOUT="10";

		while [ ! $(kill -0 ${SERVERPID}; echo "$?") -eq "0" ] && [ "${TIMEOUT}" -ne "0" ]; do
			sleep 1;
			TIMEOUT=$((${TIMEOUT}-1));
		done

		# Remove the Silverlight menu shortcut
		USER_LINK_FILE="${WINEPREFIX}/drive_c/users/${USER}/Start Menu/Programs/Microsoft Silverlight/Microsoft Silverlight.lnk";
		USER_DESKTOP_FILE="${HOME}/.local/share/applications/wine/Programs/Microsoft Silverlight/Microsoft Silverlight.desktop";
		rm -f "${USER_LINK_FILE}";
		rm -f "${USER_DESKTOP_FILE}";
		xdg-desktop-menu uninstall "${USER_DESKTOP_FILE}" 2>/dev/null;

	elif [ "${INSTALLER}" = "cablibrary" ]; then

		# Extract and register the libraries
		SYSTEM32="${WINEPREFIX}/drive_c/windows/system32";
		cabextract -d "${SYSTEM32}" "${FILEDOWNLOAD}" -F "${EXTRACTFILE}";
		if [ ! -f "${SYSTEM32}/${EXTRACTFILE}" ]; then
			echo "$PRG: Failed to extract ${EXTRACTFILE} from cab file." >&2;
			RET="1";
			continue;
		fi

		"${WINE}" regsvr32.exe "${EXTRACTFILE}";

	elif [ "${INSTALLER}" = "firefox" ]; then

		TMPFILE=$(mktemp);
		if [ ! -f "${TMPFILE}" ]; then
			echo "Failed to create tempfile.";
			RET="1";
			continue;
		fi

		# Note: We generate this file inplace, as we don't know the installation directory
		# We have to update this if something changes in the original repository
		( 	echo "[Install]";
			echo "QuickLaunchShortcut=false";
			echo "DesktopShortcut=false";
			echo "StartMenuShortcuts=false";
			echo "MaintenanceService=false";
		) > "${TMPFILE}";


		INIFILE=$("${WINE}" winepath --windows "${TMPFILE}")

		"${WINE}" "${FILEDOWNLOAD}" "/INI=$INIFILE" 2>&1 | \
			progressbar "Please wait, installing ..." "Installing $DEP";

		rm "${TMPFILE}"

	elif [ "${INSTALLER}" = "flash" ]; then

		# Launch the installer
		if [ -z "${QUIETINSTALLATION}" ] || [ "${QUIETINSTALLATION}" -eq 0 ]; then
			"${WINE}" "${FILEDOWNLOAD}" 2>&1;
		else
			"${WINE}" "${FILEDOWNLOAD}" -install 2>&1 | \
				progressbar "Please wait, installing ..." "Installing $DEP";
		fi

		INSTALL_DIR="${WINEPREFIX}/drive_c/windows/system32/Macromed/Flash";

		if [ ! -f "${INSTALL_DIR}/NPSWF32_${FLASHVERSION}.dll" ]; then
			echo "Installer for ${DEP} did not run correctly or was aborted.";
			RET="1";
			continue;
		fi

	else
		echo "$PRG: Unable to process downloaded file for ${DEP}." >&2;
		RET="1";
		continue;
	fi

	# Mark it as installed
	echo "${SHA256SUM}" > "${FILEINSTALLED}";
done

# Delete temporary files that cannot be reused later
while [ "${NUMDELETEFILES}" -ne "0" ]; do
	NUMDELETEFILES=$((${NUMDELETEFILES}-1));
	eval "TMPFILE=\$DELETEFILE_${NUMDELETEFILES}";

	echo "$PRG: Deleting temporary file $TMPFILE." >&2;
	rm "$TMPFILE";
done

exit "${RET}";
