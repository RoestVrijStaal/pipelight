#!/usr/bin/env bash

PRG=$(basename "$0")

# > Marks a file in order to delete it at program termination
# arguments:
# $1	- File to delete
ATEXIT_RM_LIST=()
atexit_add_rm()
{
	ATEXIT_RM_LIST+=("$1")
}

atexit()
{
	local file
	for file in "${ATEXIT_RM_LIST[@]}"; do
		echo "Deleting temporary '$file'."
		rm "$file"
	done
}

mktemp_with_ext()
{
	file=$(mktemp --suffix=".$1" 2>/dev/null)
	if [ "$?" -eq 0 ]; then echo "$file"; return 0; fi
	file=$(mktemp 2>/dev/null) # old version of mktemp
	if [ "$?" -eq 0 ]; then echo "$file"; return 0; fi
	file=$(mktemp -t pipelight 2>/dev/null) # MacOS version of mktemp
	if [ "$?" -eq 0 ]; then echo "$file"; return 0; fi
	return 1
}

# > Checks if a dependency is already installed
# arguments:
# $1	- Date of last change
is_installed()
{
	local LASTCHANGE="$1"
	local ckfile="$WINEPREFIX/$PLUGIN.installed"
	[ -f "$ckfile" ] && [ "$LASTCHANGE" == "$(cat "$ckfile")" ]
	return $?
}

# > Marks a dependency as already installed
# arguments: same as is_installed
mark_installed()
{
	local LASTCHANGE="$1"
	local ckfile="$WINEPREFIX/$PLUGIN.installed"
	echo "$LASTCHANGE" > "$ckfile"
}

# > Download a given dependency file
# arguments:
# $1	- URL
# $2	- SHA256
# $3	- Name
# $4	- Overwrite file extension
# returns:
# $DOWNLOADFILE
DOWNLOADFILE=""
download()
{
	local URL="$1";	local SHA="$2"; local NAME="$3"; local EXT="$4"

	if [ -z "$EXT" ]; then
		EXT=$(echo "$URL" | sed 's/.*\.//')
	fi

	# Reuse existing download
	local dlfile="/tmp/pipelight-$NAME.$EXT"
	if [ -f "$dlfile" ] && [ "$SHA" == "$(sha256sum "$dlfile" | cut -d' ' -f1)" ]; then
		DOWNLOADFILE="$dlfile"
		return 0
	fi

	local trycount=3
	local tmpfile=$(mktemp_with_ext "$EXT")
	[ -f "$tmpfile" ] || return 1
	local filesize=$(get_download_size "$URL")

	# Download to tmpfile
	while true; do
		if [ "$trycount" -le 0 ]; then
			rm "$tmpfile"
			echo "[$PRG] ERROR: Downloading of $NAME failed multiple times. Please check:" >&2
			echo "[$PRG]" >&2
			echo "[$PRG]        * that your internet connection is working properly" >&2
			echo "[$PRG]" >&2
			echo "[$PRG]        * and that the plugin database is up-to-date. To update it just run:" >&2
			echo "[$PRG]            sudo pipelight-plugin --update" >&2
			echo "[$PRG]" >&2
			echo "[$PRG]        If this doesn't help then most-likely the download URLs or checksums" >&2
			echo "[$PRG]        have changed. We recommend to open a bug-report in this case." >&2
			return 1
		fi

		download_file "$tmpfile" "$URL" 2>&1 | progressbar "Please wait, downloading ..." "Downloading $NAME ($filesize MiB)"
		if [ -f "$tmpfile" ] && [ "$SHA" == "$(sha256sum "$tmpfile" | cut -d' ' -f1)" ]; then
			break
		fi

		(( trycount-- ))
		sleep 2
	done

	# Move the downloaded file to the right path
	if mv "$tmpfile" "$dlfile"; then
		chmod 0644 "$dlfile"
		DOWNLOADFILE="$dlfile"
		return 0
	fi

	# Continue using the temp path
	atexit_add_rm "$tmpfile"
	DOWNLOADFILE="$tmpfile"
	return 0
}


# > Extract cab library
# arguments:
# $1	- cab file
# $2	- file to extract
#
# optional arguments:
# --reg - run regsvr32.dll to register the dll
install_cabextract()
{
	local CABFILE="$1"; shift
	local FILE="$1"; shift

	local system32="$WINEPREFIX/drive_c/windows/system32"
	cabextract -d "$system32" "$CABFILE" -F "$FILE"
	if [ ! -f "$system32/$FILE" ]; then
		echo "[$PRG] ERROR: Failed to extract $FILE from cab file." >&2
		return 1
	fi

	# Process additional args
	while [ $# -gt 0 ] ; do
		local cmd=$1; shift
		case "$cmd" in
			--rename)
				if ! mv "$system32/$FILE" "$system32/$1"; then
					echo "[$PRG] ERROR: Unable to rename extracted file." >&2
					return 1
				fi
				FILE="$1"; shift
				;;
			--reg)
				"$WINE" regsvr32.exe "$FILE"
				;;
			*)
				echo "[$PRG] ERROR: Internal error, install_cabextract called with argument: $cmd" >&2
				return 1
				;;
		esac
	done

	# Successful
	return 0
}

# Use fetch on FreeBSD if wget is not available
if command -v wget >/dev/null 2>&1; then
	download_file()
	{
		wget -O "$1" "$2"
	}
	get_download_size()
	{
		local filesize="$(wget -O- "$1" --spider --server-response 2>&1 | sed -ne '/Content-Length/{s/.*: //;p}')"
		local re='^[0-9]+$'
		if [[ "$filesize" -ne "0" ]] && [[ "$filesize" =~ $re ]]; then
			echo "$(($filesize/(1024*1024)))"
		else
			echo "N/A"
		fi
	}
elif command -v fetch >/dev/null 2>&1; then
	download_file()
	{
		fetch -o "$1" "$2"
	}
	get_download_size()
	{
		echo "N/A"
	}
else
	download_file()
	{
		echo "ERROR: Could neither find wget nor fetch. Unable to download file!" >&2
		return 1
	}
	get_download_size()
	{
		echo "N/A"
	}
fi

# Use shasum instead of sha256sum on MacOS / *BSD
if ! command -v sha256sum >/dev/null 2>&1 && command -v shasum >/dev/null 2>&1; then
	sha256sum()
	{
		shasum -a 256 "$1"
	}
fi

# Use md5 instead of md5sum on MacOS / *BSD
if ! command -v md5sum >/dev/null 2>&1 && command -v md5 >/dev/null 2>&1; then
	md5sum()
	{
		md5
	}
fi

# Check if some visual feedback is possible
if command -v zenity >/dev/null 2>&1; then
	progressbar()
	{
		WINDOWID="" zenity --progress --title="$1" --text="$2" --pulsate --width=400 --auto-close --no-cancel ||
		WINDOWID="" zenity --progress --title="$1" --text="$2" --pulsate --width=400 --auto-close
	}

elif command -v kdialog >/dev/null 2>&1 && command -v qdbus >/dev/null 2>&1; then
	#Check if qdbus is symlinked to qtchooser (for Arch Linux)
	QDBUSPATH=$(which qdbus)
	QDBUSPATH=$(readlink "$QDBUSPATH")
	if [ "$QDBUSPATH" == "qtchooser" ]; then
		QDBUSPATH="qtchooser -run-tool=qdbus -qt=4"
	else
		QDBUSPATH="qdbus"
	fi

	progressbar()
	{
		local dcopref=$(kdialog --title "$1" --progressbar "$2" 10)

		# Update the progress bar (not really the progress, but the user knows that something is going on)
		(
			local progress=1
			while true; do
				local err=$($QDBUSPATH $dcopref org.freedesktop.DBus.Properties.Set org.kde.kdialog.ProgressDialog value "$progress" 2>&1)
				if [ ! -z "$err" ]; then break; fi

				sleep 1

				(( progress++ ))
				if [ "$progress" -gt 10 ]; then progress=0; fi
			done
		) 0</dev/null &
		local dialogpid="$!"

		cat -

		kill "$dialogpid"
		$QDBUSPATH $dcopref org.kde.kdialog.ProgressDialog.close  &> /dev/null
	}

else
	progressbar()
	{
		cat -
	}
fi

# Abort if no arguments were given
if [ $# -ne 2 ]; then
	echo "[$PRG] ERROR: Please provide a path to a plugin config and a plugin name." >&2
	exit 1
fi

# Check for environment variables
if [ -z "$WINE" ] || [ -z "$WINEPREFIX" ]; then
	echo "[$PRG] ERROR: Missing necessary environment variables WINE and WINEPREFIX." >&2
	exit 1
fi

if [ ! -w "$WINEPREFIX" ]; then
	WINEPREFIX_PARENT="$(dirname "$WINEPREFIX")"
	if [ ! -w "$WINEPREFIX_PARENT" ] || [ ! -O "$WINEPREFIX_PARENT" ]; then
		echo "[$PRG] ERROR: You're running this script as a wrong user - WINEPREFIX or parent directory not owned by you." >&2
		exit 1
	fi
fi

PLUGIN_SCRIPT="$1"
PLUGIN="$2"

if [ ! -f "$PLUGIN_SCRIPT" ]; then
	echo "[$PRG] ERROR: Plugin script $PLUGIN_SCRIPT does not exist" >&2
	exit 1
fi

# Silent installation
if [ -z "$QUIETINSTALLATION" ]; then
	QUIETINSTALLATION=0
fi

# Generate a lock file based on the wine prefix
LOCKFILE=$(echo "$WINEPREFIX" | md5sum | cut -d' ' -f1)
LOCKFILE="/tmp/wine-$LOCKFILE.tmp"

LOCKFD=9; eval "exec $LOCKFD> \"\$LOCKFILE\""
if ! flock -x -w 360 "$LOCKFD"; then
	echo "[$PRG] ERROR: Failed to obtain an installation lock in 6 minutes." >&2
	exit 1
fi

# Close file descriptor (ensure that the lock is released when the installation is ready)
trap "EXITSTATUS=\$?; flock -u \"$LOCKFD\"; atexit; exit \"\$EXITSTATUS\"" 0

# Initialize wine if not done yet
if [ ! -f "$WINEPREFIX/system.reg" ]; then

	# Directory exists, but without system.reg - wine will assume wrong platform, so create dummy system.reg
	if [ -d "$WINEPREFIX" ] && [ ! -f "$WINEPREFIX/system.reg" ]; then
		if [ "$WINEARCH" == "win32" ] || [ "$WINEARCH" == "win64" ]; then
			echo -en "WINE REGISTRY Version 2\n\n#arch=$WINEARCH\n" > "$WINEPREFIX/system.reg"
			echo "[$PRG] Forced creation of a $WINEARCH wine prefix."
		fi
	fi

	DISPLAY="" "$WINE" wineboot.exe 2>&1 | progressbar "Please wait..." "Creating wine prefix"
fi

file_date=$(date -u -Ins -r "$PLUGIN_SCRIPT")

# Is already installed?
if is_installed "$file_date"; then
	echo "[$PRG] $PLUGIN is already installed in '$WINEPREFIX'."
	exit 0
fi

echo "[$PRG] Running $PLUGIN installation script."

source "$PLUGIN_SCRIPT"
if ! install_plugin; then
	echo "[$PRG] ERROR: Installation script for $PLUGIN failed." >&2
	exit 1
fi

# Mark the package as installed
mark_installed "$file_date"

exit 0
